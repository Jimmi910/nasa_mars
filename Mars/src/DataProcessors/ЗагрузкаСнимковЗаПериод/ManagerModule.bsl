
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Загрузить снимки за период.
// 
// Параметры:
//  ДатаНачала - Дата - Дата начала
//  ДатаОкончания - Дата - Дата окончания
// 
// Возвращаемое значение:
//  Соответствие из см. ВызовАпиСервисаСервер.ФотографииЗаДату
Функция ЗагрузитьСнимкиЗаПериод(ДатаНачала, ДатаОкончания) Экспорт
	
	Результат = МодульФоновыхЗаданийСервер.СтруктураПроцессаОбработкиДанных();
	Результат.ПолучениеДанных = Истина;
	
	МассивЗагружаемыхДат = МассивДатИзИнтервала(ДатаНачала, ДатаОкончания);
	
	Результат.ВсегоДат = МассивЗагружаемыхДат.Количество();
	
	ПолученыеДанныеЗаВсеДаты = Новый Соответствие();
	
	Для Каждого ТекущаяДата Из МассивЗагружаемыхДат Цикл
		
		ДанныеЗаДату = ЗагрузитьСнимкиЗаДату(ТекущаяДата);
		
		ПолученыеДанныеЗаВсеДаты.Вставить(Формат(ТекущаяДата, "ДФ=yyyy-MM-dd;"), ДанныеЗаДату);
		
		Результат.ОбработаноДат = Результат.ОбработаноДат + 1;
		
		СообщитьПромежуточныйРезультатЗагрузки(Результат);
		
	КонецЦикла;
	
	Возврат ПолученыеДанныеЗаВсеДаты;
	
КонецФункции

Процедура ЗагрузитьФотографии(МассивСнимков) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработать полученые данные снимков.
// 
// Параметры:
//  ДанныеСнимковЗаПериод - Соответствие из см. ВызовАпиСервисаСервер.ФотографииЗаДату - Данные к обработке
// 
// Возвращаемое значение:
//  Структура -
//	 * см. МодульФоновыхЗаданийСервер.СтруктураПроцессаОбработкиДанных
Функция ОбработатьПолученыеДанныеСнимков(ДанныеСнимковЗаПериод) Экспорт
	
	Результат = МодульФоновыхЗаданийСервер.СтруктураПроцессаОбработкиДанных();
	Результат.ОбработкаДанных = Истина;
	
	Результат.ВсегоСнимков = ВсегоСнимков(ДанныеСнимковЗаПериод);
	
	СообщитьПромежуточныйРезультатЗагрузки(Результат);
	
	Для Каждого ДанныеОдногоДня Из ДанныеСнимковЗаПериод Цикл
		
		ОбработаноЗаДень = ОбработатьДанныеСнимковЗаДень(ДанныеОдногоДня);
		
		Результат.Обработано = Результат.Обработано + ОбработаноЗаДень.Обработано;
		Результат.НовыеФото = Результат.НовыеФото + ОбработаноЗаДень.НовыеФото;
		Результат.НовыеКамеры = Результат.НовыеКамеры + ОбработаноЗаДень.НовыеКамеры;
		Результат.НовыеМарсоходы = Результат.НовыеМарсоходы + ОбработаноЗаДень.НовыеМарсоходы;
		Результат.ТекстОшибки = Результат.ТекстОшибки + ОбработаноЗаДень.ТекстОшибки;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.МассивНовыхФото, ОбработаноЗаДень.МассивНовыхФото, Истина);
		
		СообщитьПромежуточныйРезультатЗагрузки(Результат);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Обработать данные снимков за день.
// 
// Параметры:
//  ДанныеОдногоДня - Структура:
//   * photos - см. ВызовАпиСервисаСервер.СтруктураФотографииМарсохода
// 
// Возвращаемое значение:
//  Структура - Обработать данные снимков за день:
// * ВсегоСнимков - Число -
// * Обработано - Число -
// * НовыеФото - Число -
// * НовыеКамеры - Число -
// * НовыеМарсоходы - Число -
// * Завершено - Булево -
// * ТекстОшибки - Строка -
Функция ОбработатьДанныеСнимковЗаДень(ДанныеОдногоДня)
	
	ТЗДляОбработки = ТаблицаФотоДляЗагрузки();
	
	Для Каждого ДанныеФотографии Из ДанныеОдногоДня.Значение.photos Цикл
		
		НоваяСтрока = ТЗДляОбработки.Добавить();
		НоваяСтрока.id_Фото = ДанныеФотографии.id;
		НоваяСтрока.id_Марсохода = ДанныеФотографии.rover.id;
		НоваяСтрока.id_Камеры = ДанныеФотографии.camera.id;
		
		ДатаСтрокой = ДанныеФотографии.rover.landing_date;
		ДанныеФотографии.rover.landing_date = Дата(СтрЗаменить(ДатаСтрокой, "-", ""));
		ДатаСтрокой = ДанныеФотографии.rover.launch_date;
		ДанныеФотографии.rover.launch_date = Дата(СтрЗаменить(ДатаСтрокой, "-", ""));
		
		ДатаСтрокой = ДанныеФотографии.earth_date;
		ДанныеФотографии.earth_date = Дата(СтрЗаменить(ДатаСтрокой, "-", ""));
		
		НоваяСтрока.ДанныеФото = ЗначениеВСтрокуВнутр(ДанныеФотографии);
		
	КонецЦикла;
	
	ВыборкаНеЗагруженыхИД = ОставитьТолькоНеЗагруженыеДанные(ТЗДляОбработки);
	
	МассивДат = Новый Массив;
	МассивДат.Добавить(ДанныеОдногоДня);
	ВсегоСнимков = ВсегоСнимков(МассивДат);
	
	Результат = ЗагрузитьДанныеФотографий(ВыборкаНеЗагруженыхИД);
	
	Если ВыборкаНеЗагруженыхИД.Количество() = 0 Тогда
		Результат.Обработано = ВсегоСнимков;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Загрузить данные фотографий.
// 
// Параметры:
//  ВыборкаНеЗагруженыхИД - ВыборкаДанных - Выборка не загруженых ИД
// 
// Возвращаемое значение:
//  Структура - Загрузить данные фотографий:
// * ВсегоСнимков - Число -
// * Обработано - Число -
// * НовыеФото - Число -
// * НовыеКамеры - Число -
// * НовыеМарсоходы - Число -
// * Завершено - Булево -
// * ТекстОшибки - Строка -
Функция ЗагрузитьДанныеФотографий(ВыборкаНеЗагруженыхИД)
	
	Результат = МодульФоновыхЗаданийСервер.СтруктураПроцессаОбработкиДанных();
	
	Пока ВыборкаНеЗагруженыхИД.Следующий() Цикл // Марсоход
		
		Марсоход = ВыборкаНеЗагруженыхИД.Марсоход;
		
		Если Не ЗначениеЗаполнено(Марсоход) Тогда
			ДанныеФото = ЗначениеИзСтрокиВнутр(ВыборкаНеЗагруженыхИД.ДанныеФото); // см. ВызовАпиСервисаСервер.СтруктураФотографииМарсохода
			ДанныеМарсохода = ДанныеФото.rover; 
			Марсоход = Справочники.Марсаходы.СоздатьМарсоход(ДанныеМарсохода);
			Результат.НовыеМарсоходы = Результат.НовыеМарсоходы + 1; 
		КонецЕсли;
		
		Камеры = ВыборкаНеЗагруженыхИД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Камеры.Следующий() Цикл // Камера
			
			Камера = Камеры.Камера;
			
			Если Не ЗначениеЗаполнено(Камера) Тогда
				ДанныеФото = ЗначениеИзСтрокиВнутр(Камеры.ДанныеФото);
				ДанныеКамеры = ДанныеФото.camera;
				ДанныеКамеры.Вставить("Владелец", Марсоход);
				Камера = Справочники.КамерыМарсоходов.СоздатьКамеру(ДанныеКамеры);
				Результат.НовыеКамеры = Результат.НовыеКамеры + 1;
			КонецЕсли;
			
			Снимки = Камеры.Выбрать();
			Пока Снимки.Следующий() Цикл // Снимки
				
				ДанныеФото = ЗначениеИзСтрокиВнутр(Снимки.ДанныеФото);
				ДанныеФото.Вставить("Владелец", Камера);
				Фото = Справочники.СнимкиСКамер.СоздатьСнимок(ДанныеФото);
				
				Результат.МассивНовыхФото.Добавить(Фото);
				
				Результат.НовыеФото = Результат.НовыеФото + 1;
				Результат.Обработано = Результат.Обработано + 1;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Оставить только не загруженые фото.
// 
// Параметры:
//  ТаблицаСФото - ТаблицаЗначений: см. ТаблицаФотоДляЗагрузки
// 
// Возвращаемое значение:
//  ВыборкаДанных:
//	* id_Фото - Число
//	* id_Камеры - Число
//	* id_Марсохода - Число
//	* ДанныеФото - Строка
Функция ОставитьТолькоНеЗагруженыеДанные(ТаблицаСФото)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", ТаблицаСФото);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТЗ.id_Фото КАК ЧИСЛО(10, 0)) КАК id_Фото,
	               |	ВЫРАЗИТЬ(ТЗ.id_Марсохода КАК ЧИСЛО(10, 0)) КАК id_Марсохода,
	               |	ВЫРАЗИТЬ(ТЗ.id_Камеры КАК ЧИСЛО(10, 0)) КАК id_Камеры,
	               |	ВЫРАЗИТЬ(ТЗ.ДанныеФото КАК СТРОКА(1000)) КАК ДанныеФото
	               |ПОМЕСТИТЬ ИДФотоКамерыМарсохода
	               |ИЗ
	               |	&ТЗ КАК ТЗ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ИД.id_Фото КАК id_Фото,
	               |	ЕСТЬNULL(СнимкиСКамер.Ссылка, 0) КАК Снимок,
	               |	КамерыМарсоходов.Ссылка КАК Камера,
	               |	Марсоходы.Ссылка КАК Марсоход,
	               |	ИД.id_Камеры КАК id_Камеры,
	               |	ИД.id_Марсохода КАК id_Марсохода,
	               |	ИД.ДанныеФото КАК ДанныеФото
	               |ИЗ
	               |	ИДФотоКамерыМарсохода КАК ИД
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СнимкиСКамер КАК СнимкиСКамер
	               |		ПО ИД.id_Фото = СнимкиСКамер.id
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КамерыМарсоходов КАК КамерыМарсоходов
	               |		ПО ИД.id_Камеры = КамерыМарсоходов.id
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Марсоходы КАК Марсоходы
	               |		ПО ИД.id_Марсохода = Марсоходы.id
	               |ГДЕ
	               |	ЕСТЬNULL(СнимкиСКамер.Ссылка, 0) = 0
	               |ИТОГИ
	               |	МАКСИМУМ(Камера),
	               |	МАКСИМУМ(Марсоход),
	               |	МАКСИМУМ(ДанныеФото)
	               |ПО
	               |	id_Марсохода,
	               |	id_Камеры";
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Загрузить снимки за дату.
// 
// Параметры:
//  ТекущаяДата - Дата - Текущая дата
// 
// Возвращаемое значение:
//  см. ВызовАпиСервисаСервер.ФотографииЗаДату
Функция ЗагрузитьСнимкиЗаДату(ТекущаяДата)
	
	Возврат ВызовАпиСервисаСервер.ФотографииЗаДату(ТекущаяДата);
	
КонецФункции

// Всего снимков.
// 
// Параметры:
//  ДанныеСнимковЗаПериод - Соответствие из см. ВызовАпиСервисаСервер.ФотографииЗаДату
// 
// Возвращаемое значение:
//  Число - Всего снимков
Функция ВсегоСнимков(ДанныеСнимковЗаПериод)
	
	Всего = 0;
	
	Для Каждого СнимкиЗадату Из ДанныеСнимковЗаПериод Цикл
		
		Всего = Всего + СнимкиЗадату.Значение.photos.Количество();
		
	КонецЦикла;
	
	Возврат Всего;
	
КонецФункции

// Таблица фото для загрузки.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица фото для загрузки:
// * id_Фото - Число -
// * id_Камеры - Число - 
// * id_Марсохода - Число -
// * ДанныеФото - Строка - Структура в строке
Функция ТаблицаФотоДляЗагрузки()
	
	ОП = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений();
	ТЗ.Колонки.Добавить("id_Фото", ОП);
	ТЗ.Колонки.Добавить("id_Камеры", ОП);
	ТЗ.Колонки.Добавить("id_Марсохода", ОП);
	ТЗ.Колонки.Добавить("ДанныеФото", Новый ОписаниеТипов("Строка"));
	
	Возврат ТЗ;
	
КонецФункции 

Процедура СообщитьПромежуточныйРезультатЗагрузки(Результат)
	Сообщение = ЗначениеВСтрокуВнутр(Результат);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
КонецПроцедуры

// Массив дат из интервала.
// 
// Параметры:
//  НачалоПериода - Дата - Начало периода
//  КонецПериода - Дата - Конец периода
// 
// Возвращаемое значение:
//  Массив из Дата
Функция МассивДатИзИнтервала(НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.Текст = ТексЗапросаДляИнтервалаДат();

	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);

	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();
	МассивДат = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		Дата = Выборка.Период; // Дата
		МассивДат.Добавить(Дата);
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

Функция ТексЗапросаДляИнтервалаДат()
	Возврат "ВЫБРАТЬ
			|	0 КАК Ключ
			|ПОМЕСТИТЬ Порядки
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	1
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	2
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	3
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	4
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	5
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	6
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	7
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	8
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	9
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ), ДЕНЬ, П1.Ключ + П2.Ключ * 10 + П3.Ключ * 100) КАК Период
			|ИЗ
			|	Порядки КАК П1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Порядки КАК П2
			|		ПО (ИСТИНА)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Порядки КАК П3
			|		ПО (ИСТИНА)
			|ГДЕ
			|	П1.Ключ + П2.Ключ * 10 + П3.Ключ * 100 <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
КонецФункции

#КонецОбласти

#КонецЕсли
